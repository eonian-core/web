@import '../screen.scss';

.main {
  display: flex;
  flex-direction: column;

  min-height: 100vh;
  width: 100%;

  max-width: var(--max-width);
  padding: calc(var(--navigation-height) * 2) var(--width-gap);

  @media (max-width: $screen-tablet) {
    padding-left: 1rem;
    padding-right: 1rem;
  }

  @media (max-width: $screen-mobile) {
    padding: 0;
    padding-top: var(--navigation-height);
    padding-bottom: var(--navigation-height);
  }
}

.backgroundGradient {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  z-index: -1;

  &::before {
    content: '';
    position: absolute;
    top: -50%;
    left: 0;
    right: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    animation: animatedBackground 5s ease forwards;

    // (!) Fallback for browsers that don't support CSS relative color functions
    // This "linear-gradient" function is a part of "postcss-easing-gradients" plugin,
    // so color should be static and inlined (no CSS variables allowed).
    // We need this plugin to stretch the single color to the whole smooth gradient.
    background: linear-gradient(in oklch to bottom, var(--color-lending-gradient), ease-in-out, transparent);

    @supports (color: hsl(from white h s l)) {
      background: linear-gradient(
        180deg,
        var(--color-lending-gradient) 0%,
        rgb(from var(--color-lending-gradient) r g b / 50%) 50%,
        rgb(from var(--color-lending-gradient) r g b / 12%) 75%,
        transparent 87%
      );

      @media (max-width: $screen-mobile) {
        background: linear-gradient(
          180deg,
          var(--color-lending-mobile-gradient) 0%,
          rgb(from var(--color-lending-mobile-gradient) r g b / 50%) 50%,
          rgb(from var(--color-lending-mobile-gradient) r g b / 12%) 75%,
          transparent 87%
        );
      }
    }

    

    z-index: 100;
  }
}

@keyframes animatedBackground {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
