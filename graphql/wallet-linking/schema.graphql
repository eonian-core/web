"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
Base meta information about the entity, support soft delete
"""
interface BaseEntity {
  id: String!
  createdAt: DateTimeISO!
  """
  Initiator of the create action. Ex. user, admin
  """
  createdBy: String!
  """
  soft delete, if set then deleted
  """
  deletedAt: DateTimeISO
  """
  Initiator of the delete action. Ex. user, admin
  """
  deletedBy: String
}

type Wallet implements BaseEntity {
  id: String!
  createdAt: DateTimeISO!
  createdBy: String!
  deletedAt: DateTimeISO
  deletedBy: String

  address: String!
  links: [Link!]!
}

union LinkPreview = EmailLinkPreview | SocialLinkPreview

type WalletPreview {
  address: String!
  """
  If not empty, then the wallet is linked to an email or social account
  Will return only last linked account
  """
  link: LinkPreview!
}

union LinkPayload = EmailLink | SocialLink

type Link implements BaseEntity {
  id: String!
  createdAt: DateTimeISO!
  createdBy: String!
  deletedAt: DateTimeISO
  deletedBy: String

  wallet: Wallet!
  walletId: String!
  payload: LinkPayload!
}

type EmailLink implements BaseEntity {
  id: String!
  createdAt: DateTimeISO!
  createdBy: String!
  deletedAt: DateTimeISO
  deletedBy: String

  email: String!
}

type EmailLinkPreview {
  """
  Masked preview of email, ex. j***@g***.com 
  """
  email: String!
} 

type SocialLink implements BaseEntity {
  id: String!
  createdAt: DateTimeISO!
  createdBy: String!
  deletedAt: DateTimeISO
  deletedBy: String

  """
  twitter, facebook, instagram, etc.
  """
  platform: String!
  username: String!
}

type SocialLinkPreview {
  platform: String!
  """
  Masked preview of username, ex. @joh*** 
  """
  username: String!
}

type Query {
  """
  Only one route that not require authentication
  Not inlcude deleted wallets and all data is masked
  """
  getWalletPreview(address: String!): WalletPreview

  """
  Requires authentication header with wallet address signature
  """
  getWallet(address: String!): Wallet
  """
  Requires admin authentication header
  """
  getWallets(includeDeleted: Boolean = false): [Wallet!]!

  getLinks(includeDeleted: Boolean = false): [Link!]!
  getEmailLinks(includeDeleted: Boolean = false): [EmailLink!]!
  getSocialLinks(includeDeleted: Boolean = false): [SocialLink!]!
}

enum MutationAction {
  LINK
  UNLINK
}

input LinkWalletInput {
    """
    Should be LINK for linking action and UNLINK for unlink action
    """
    action: MutationAction!
    timestamp: DateTimeISO!
    payload: LinkWalletInputPayload!
    """
    Signature of the input, generated by the client wallet
    Combines action + timestamp + payload to generate the signature
    Valid only withing of 5 minutes from the timestamp
    """
    signature: String!
}

union LinkWalletInputPayloadLink = EmailLinkInput | SocialLinkInput

input LinkWalletInputPayload {
    address: String!
    link: LinkWalletInputPayloadLink!
}

input EmailLinkInput {
    email: String!
}

input SocialLinkInput {
    platform: String!
    username: String!
}

type Mutation {
  """
  Link wallet to email or social account.
  If wallet not exist then will create new wallet
  """
  linkWallet(input: LinkWalletInput!): Wallet! 
  """
  Unlink wallet from email or social account
  Apply soft delete strategy for the link
  """
  deleteLink(input: LinkWalletInput!): Link!
}

